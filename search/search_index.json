{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"CanisMajor - FIWARE Blockchain Adaptor CanisMajor is a blockchain adaptor that supports various DLT (Ethereum Client,IOTA, FABRIC chaincode (soon)), the adaptor aims to submit the data to DLT and works with NGSI-LD and NGSI-V2 as well. The adaptor is not be recommended to work for public-permissionless blockchains (specially tokens, cryptocurrencies). CanisMajor Adaptor recommend using AEI contract Model for the Ethereum Clients. AEI (Asset,Event, Identity) Smart Contract is written in Solidity using ERC721 standard (NFT).","title":"Home"},{"location":"index.html#canismajor-fiware-blockchain-adaptor","text":"CanisMajor is a blockchain adaptor that supports various DLT (Ethereum Client,IOTA, FABRIC chaincode (soon)), the adaptor aims to submit the data to DLT and works with NGSI-LD and NGSI-V2 as well. The adaptor is not be recommended to work for public-permissionless blockchains (specially tokens, cryptocurrencies). CanisMajor Adaptor recommend using AEI contract Model for the Ethereum Clients. AEI (Asset,Event, Identity) Smart Contract is written in Solidity using ERC721 standard (NFT).","title":"CanisMajor - FIWARE Blockchain Adaptor"},{"location":"apis.html","text":"APIs","title":"APIs"},{"location":"apis.html#apis","text":"","title":"APIs"},{"location":"architecture.html","text":"Architecture Canis Major in powered by FIWARE Architecture Canis major uses FIWARE Pep-Proxy (fork version) link which allow to config \"canismajor endpoint\" process.env.CANIS_MAJOR_URL = http://localhost:4000 (canis major endpoint) Flow Diagram The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter). Canis Major Design: Canis major is designed to submit the transaction in diffrent kind of DLT current it support these blockchain Supported DLT Clients [x] Ethereum [x] IOTA [ ] FABRIC Chaincode and is not recommended to use in public-permissionless or crypotcurrencies. For the Etherum Clients such as geth, quorum, besu etc it is recommended to use AEI contract (plese check the contract section in this documentation), though you can also use your own contract and configure it using canismajor rest api. Canis Major also support varsion storage type store the payload Storage Type [x] IPFS [x] IOTA MaM [x] Merkle Tree IPFS You can use IPFS, a distributed system for storing and accessing files and data, in Canis Major Adaptor. To learn about IPFS please follow here IOTAMaM (Masked Authenticated Messaging) Canis Major Also Supporta IOTA MaM. The IOTA Tangle allows you to attach zero-value transactions to it, but these transactions are not signed or checked by nodes to verify their authenticity. With MAM, all messages are signed by the owner of a seed. To learn about IOTA MaM please follow link MerkleTree Merkle trees are data structures devised to authenticate, with a unique signature, a set of messages, by at the same time making an intended verifier able to verify authenticity of a single message without the disclosure of the other messages. To learn about Merkle Tree please follow link In a canis major merkle is use as mentioned in below AEI Contract Model AEI (Asset, Event and Identity) Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. ERC 721 Contract is follow OpenZepplin standards, security audits are trusted by leading organizations building decentralized systems. ERC 721 ERC 721 A standard interface for non-fungible tokens, also known as deeds. The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and transfer NFTs. We considered use cases of NFTs being owned and transacted by individuals as well as consignment to third party brokers/wallets/auctioneers (\u201coperators\u201d). NFTs can represent ownership over digital or physical assets. We considered a diverse universe of assets, and we know you will dream up many more: Physical property \u2014 houses, unique artwork Virtual collectables \u2014 unique pictures of kittens, collectable cards \u201cNegative value\u201d assets \u2014 loans, burdens and other responsibilities In general, all houses are distinct and no two kittens are alike. NFTs are distinguishable and you must track the ownership of each one separately. to know more follow here: ERC 721 OpenZepplin ERC721 AEI Architecture AEI Contract Design Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset. Example Supported Methods - createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported. Dependencies This project uses: - truffle - NodeJS - Ganache-CLI (testrpc) - OpenZeppelin Canis Major with AEI Contract: Use of Canis Major CanisMajor is a blockchain adaptor that supports various DLT. Canis Major Design The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter). Github Souce Documentation Usages Creation of an Entity (Animal, Farm etc) Creation of an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker and the entity will be store. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. Here we are using AEI_Contract and the createAsset method of the contract is called. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time. Adding Metadata (eventy) on an Entity (Animal, Farm etc) Adding Metadata on an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker with the meta information and entity_id. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. here the request is for adding the metadata, canis major will call AddMetadata method of the AEI Contract. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time. Qyery Quering the data on blockchain goes as follow: Actor send a request to canis major with the Entity_ID. Canis major check the transaction details from the local storage and fetch the reciept. Canis Major futher call the AEI contarct, getAsset method and the fetch the stored hash. Hash will be returned back to the hash. **Note: the returned Hash could be a IPFS Hash, IOTAMaM hash or MerkleRoot, depend on the configuration of the CanisMajor and data from the has can be fetched or validated from the canismajor query apis (for more checkout the canismajor api specification)\"","title":"Architecture"},{"location":"architecture.html#architecture","text":"","title":"Architecture"},{"location":"architecture.html#canis-major-in-powered-by-fiware-architecture","text":"Canis major uses FIWARE Pep-Proxy (fork version) link which allow to config \"canismajor endpoint\" process.env.CANIS_MAJOR_URL = http://localhost:4000 (canis major endpoint)","title":"Canis Major in powered by FIWARE Architecture"},{"location":"architecture.html#flow-diagram","text":"The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter).","title":"Flow Diagram"},{"location":"architecture.html#canis-major-design","text":"Canis major is designed to submit the transaction in diffrent kind of DLT current it support these blockchain","title":"Canis Major Design:"},{"location":"architecture.html#supported-dlt-clients","text":"[x] Ethereum [x] IOTA [ ] FABRIC Chaincode and is not recommended to use in public-permissionless or crypotcurrencies. For the Etherum Clients such as geth, quorum, besu etc it is recommended to use AEI contract (plese check the contract section in this documentation), though you can also use your own contract and configure it using canismajor rest api. Canis Major also support varsion storage type store the payload","title":"Supported DLT Clients"},{"location":"architecture.html#storage-type","text":"[x] IPFS [x] IOTA MaM [x] Merkle Tree","title":"Storage Type"},{"location":"architecture.html#ipfs","text":"You can use IPFS, a distributed system for storing and accessing files and data, in Canis Major Adaptor. To learn about IPFS please follow here","title":"IPFS"},{"location":"architecture.html#iotamam-masked-authenticated-messaging","text":"Canis Major Also Supporta IOTA MaM. The IOTA Tangle allows you to attach zero-value transactions to it, but these transactions are not signed or checked by nodes to verify their authenticity. With MAM, all messages are signed by the owner of a seed. To learn about IOTA MaM please follow link","title":"IOTAMaM (Masked Authenticated Messaging)"},{"location":"architecture.html#merkletree","text":"Merkle trees are data structures devised to authenticate, with a unique signature, a set of messages, by at the same time making an intended verifier able to verify authenticity of a single message without the disclosure of the other messages. To learn about Merkle Tree please follow link In a canis major merkle is use as mentioned in below","title":"MerkleTree"},{"location":"architecture.html#aei-contract-model","text":"AEI (Asset, Event and Identity) Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. ERC 721 Contract is follow OpenZepplin standards, security audits are trusted by leading organizations building decentralized systems.","title":"AEI Contract Model"},{"location":"architecture.html#erc-721","text":"ERC 721 A standard interface for non-fungible tokens, also known as deeds. The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and transfer NFTs. We considered use cases of NFTs being owned and transacted by individuals as well as consignment to third party brokers/wallets/auctioneers (\u201coperators\u201d). NFTs can represent ownership over digital or physical assets. We considered a diverse universe of assets, and we know you will dream up many more: Physical property \u2014 houses, unique artwork Virtual collectables \u2014 unique pictures of kittens, collectable cards \u201cNegative value\u201d assets \u2014 loans, burdens and other responsibilities In general, all houses are distinct and no two kittens are alike. NFTs are distinguishable and you must track the ownership of each one separately. to know more follow here: ERC 721 OpenZepplin ERC721","title":"ERC 721"},{"location":"architecture.html#aei-architecture","text":"AEI Contract Design Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset.","title":"AEI Architecture"},{"location":"architecture.html#example","text":"","title":"Example"},{"location":"architecture.html#supported-methods","text":"- createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported.","title":"Supported Methods"},{"location":"architecture.html#dependencies","text":"This project uses: - truffle - NodeJS - Ganache-CLI (testrpc) - OpenZeppelin","title":"Dependencies"},{"location":"architecture.html#canis-major-with-aei-contract","text":"","title":"Canis Major with AEI Contract:"},{"location":"architecture.html#use-of-canis-major","text":"CanisMajor is a blockchain adaptor that supports various DLT.","title":"Use of Canis Major"},{"location":"architecture.html#canis-major-design_1","text":"The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter). Github Souce Documentation","title":"Canis Major Design"},{"location":"architecture.html#usages","text":"","title":"Usages"},{"location":"architecture.html#creation-of-an-entity-animal-farm-etc","text":"Creation of an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker and the entity will be store. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. Here we are using AEI_Contract and the createAsset method of the contract is called. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time.","title":"Creation of an Entity (Animal, Farm etc)"},{"location":"architecture.html#adding-metadata-eventy-on-an-entity-animal-farm-etc","text":"Adding Metadata on an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker with the meta information and entity_id. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. here the request is for adding the metadata, canis major will call AddMetadata method of the AEI Contract. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time.","title":"Adding Metadata (eventy) on an Entity (Animal, Farm etc)"},{"location":"architecture.html#qyery","text":"Quering the data on blockchain goes as follow: Actor send a request to canis major with the Entity_ID. Canis major check the transaction details from the local storage and fetch the reciept. Canis Major futher call the AEI contarct, getAsset method and the fetch the stored hash. Hash will be returned back to the hash. **Note: the returned Hash could be a IPFS Hash, IOTAMaM hash or MerkleRoot, depend on the configuration of the CanisMajor and data from the has can be fetched or validated from the canismajor query apis (for more checkout the canismajor api specification)\"","title":"Qyery"},{"location":"installation.html","text":"Installation Guide This section describes installing Canis Major Blockchain Adaptor: Requirments In order to execute Canis Major, it is needed to have previously installed the following software: - NodeJS 12 - ORM Database (SQL, Postgres) # Installation The following steps need to be performed to get Canis Major up and running: Download the software, using GitHub. git clone https://github.com/fiware-blockchain/canismajor Install all required libraries using npm. cd canismajor npm install Database Init/Migration DB_USERNAME=${DB_USERNAME} \\ DB_PASSWORD=${DB_PASSWORD} \\ DB_NAME=${DB_NAME} \\ DB_HOST=${DB_HOST} \\ DB_PORT=${DB_PORT} \\ npm run create && npm run migrate Configure the installation - DB_NAME - DB_HOST - DB_PORT - DB_DILECT - DB_USERNAME - DB_PASSWORD - CM_PORT - TRANSCTION_TIMEOUT - DLT_TYPE // eth or iota - IOTA_ENDPOINT // iota config // eth config - RPC_ENDPOINT - DEFAULT_GAS - DEFAULT_GAS_PRICE - AEI_CONTRACT_MODE - CONTRACT_ADDRESS // storage config - STORAGE_TYPE // iota, ipfs or merkletree - IPFS_HOST - IPFS_PORT - IPFS_PROTOCOL - IPFS_AUTH_CODE - IOTAMAM_HOST - IOTAMAM_MODE ENV Variable Description Example DB_NAME Name of the Database cm DB_HOST Database HOST name localhost DB_PORT Database PORT number 3306 DB_DILECT Database Dilect (sequlize ORM) can be mysql, postgres mysql DB_USERNAME Database User Name root DB_PASSWORD Database Password root TRANSCTION_TIMEOUT Transaction timeout 1000 DLT_TYPE Ledger or Blockchain Type (Can be eth or iota) eth IOTA_ENDPOINT (optional) IOTA Endpoint (required) when the DLT_TYPE=iota 'https://nodes.devnet.iota.org:443' RPC_ENDPOINT Endpoint of the ethereum client 'http://127.0.0.1:8545' DEFAULT_GAS Default GAS usage of the Eth Smart Contract 300000 AEI_CONTRACT_MODE AEI contract enabled or not true CONTRACT_ADDRESS Contract Address of the deployed smart contract 0xcd125237903865f39caf6443209c89bA70a4A385 Storage Configuration ipfs ENV Variable Description Example STORAGE_TYPE Storage type to store the payload (can be ipfs, iota or merkletree) ipfs IPFS_HOST IPFS host name ipfs.infura.io IPFS_PORT IPFS port number 5001 IPFS_PROTOCOL IPFS protocol https IPFS_AUTH_CODE (optional) Bearer Auth code \" \" IOTAMaM ENV Variable Description Example STORAGE_TYPE Storage type to store the payload (can be ipfs, iota or merkletree) iota IOTAMAM_HOST IOTAMaM Host Name https://nodes.devnet.iota.org IOTAMAM_MODE IOTAMaM mode (can be public or private) public Merkle Tree ENV Variable Description Example STORAGE_TYPE Storage type to store the payload (can be ipfs, iota or merkletree) merkletree Configuration diagram there configuration can be also mentioned in src/configuration/config.js Running the CanisMajor npm start","title":"Installation"},{"location":"installation.html#installation-guide","text":"This section describes installing Canis Major Blockchain Adaptor:","title":"Installation Guide"},{"location":"installation.html#requirments","text":"In order to execute Canis Major, it is needed to have previously installed the following software: - NodeJS 12 - ORM Database (SQL, Postgres) # Installation The following steps need to be performed to get Canis Major up and running: Download the software, using GitHub. git clone https://github.com/fiware-blockchain/canismajor Install all required libraries using npm. cd canismajor npm install Database Init/Migration DB_USERNAME=${DB_USERNAME} \\ DB_PASSWORD=${DB_PASSWORD} \\ DB_NAME=${DB_NAME} \\ DB_HOST=${DB_HOST} \\ DB_PORT=${DB_PORT} \\ npm run create && npm run migrate Configure the installation - DB_NAME - DB_HOST - DB_PORT - DB_DILECT - DB_USERNAME - DB_PASSWORD - CM_PORT - TRANSCTION_TIMEOUT - DLT_TYPE // eth or iota - IOTA_ENDPOINT // iota config // eth config - RPC_ENDPOINT - DEFAULT_GAS - DEFAULT_GAS_PRICE - AEI_CONTRACT_MODE - CONTRACT_ADDRESS // storage config - STORAGE_TYPE // iota, ipfs or merkletree - IPFS_HOST - IPFS_PORT - IPFS_PROTOCOL - IPFS_AUTH_CODE - IOTAMAM_HOST - IOTAMAM_MODE ENV Variable Description Example DB_NAME Name of the Database cm DB_HOST Database HOST name localhost DB_PORT Database PORT number 3306 DB_DILECT Database Dilect (sequlize ORM) can be mysql, postgres mysql DB_USERNAME Database User Name root DB_PASSWORD Database Password root TRANSCTION_TIMEOUT Transaction timeout 1000 DLT_TYPE Ledger or Blockchain Type (Can be eth or iota) eth IOTA_ENDPOINT (optional) IOTA Endpoint (required) when the DLT_TYPE=iota 'https://nodes.devnet.iota.org:443' RPC_ENDPOINT Endpoint of the ethereum client 'http://127.0.0.1:8545' DEFAULT_GAS Default GAS usage of the Eth Smart Contract 300000 AEI_CONTRACT_MODE AEI contract enabled or not true CONTRACT_ADDRESS Contract Address of the deployed smart contract 0xcd125237903865f39caf6443209c89bA70a4A385 Storage Configuration ipfs ENV Variable Description Example STORAGE_TYPE Storage type to store the payload (can be ipfs, iota or merkletree) ipfs IPFS_HOST IPFS host name ipfs.infura.io IPFS_PORT IPFS port number 5001 IPFS_PROTOCOL IPFS protocol https IPFS_AUTH_CODE (optional) Bearer Auth code \" \" IOTAMaM ENV Variable Description Example STORAGE_TYPE Storage type to store the payload (can be ipfs, iota or merkletree) iota IOTAMAM_HOST IOTAMaM Host Name https://nodes.devnet.iota.org IOTAMAM_MODE IOTAMaM mode (can be public or private) public Merkle Tree ENV Variable Description Example STORAGE_TYPE Storage type to store the payload (can be ipfs, iota or merkletree) merkletree Configuration diagram there configuration can be also mentioned in src/configuration/config.js Running the CanisMajor npm start","title":"Requirments"},{"location":"usage.html","text":"Usages Introduction Canis Major is designed to submit the transaction to DLT To do so we are currenlty using Alastria Network, a non-profit association that promotes the digital economy through the development of decentralised ledger technologies/Blockchain and also a member of FIWARE. Alastria partners have two operational networks (Network T and Network B) on which nodes can be deployed (either regular nodes or critical: validators and bootnodes). The first of Alastria\u2019s partner node networks (Red T) is built on Quorum technology,an open-source Ethereum client developed under the LGPL license and written in Go. GoQuorum is an Ethereum-based protocol that runs private, permissioned networks. To know more about it follow here: Alastria Network Quorum Technology GANACHE-CLI (TESTRPC) Test Network for the development. Use of AEI Contract CattleChain project using AEI (Asset, Event, Identity) Standard Contract. AEI Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. AEI, asset, events (metadata), identity, is designed to store the NGSI-LD model with the help of Canis Major Adaptor. ERC 721 Contract is follow OpenZepplin standards, security audits are trusted by leading organizations building decentralized systems. ERC 721 ERC 721 A standard interface for non-fungible tokens, also known as deeds. The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and transfer NFTs. We considered use cases of NFTs being owned and transacted by individuals as well as consignment to third party brokers/wallets/auctioneers (\u201coperators\u201d). NFTs can represent ownership over digital or physical assets. We considered a diverse universe of assets, and we know you will dream up many more: Physical property \u2014 houses, unique artwork Virtual collectables \u2014 unique pictures of kittens, collectable cards \u201cNegative value\u201d assets \u2014 loans, burdens and other responsibilities In general, all houses are distinct and no two kittens are alike. NFTs are distinguishable and you must track the ownership of each one separately. to know more follow here: ERC 721 OpenZepplin ERC721 AEI Contract Design AEI contract is cosist of 3 aspects (see the figure below): Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset. Example To Store the NGSI-LD model there are few possibilities with the help of some supported storage type: IPFS IOTA MaM MerkleRoot Methods - createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported. Dependencies This project uses: truffle NodeJS Ganache-CLI (testrpc) OpenZeppelin to know more follow here: GitHub Source Use of Canis Major CanisMajor is a blockchain adaptor that supports various DLT. Canis Major Design The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter). Github Souce Documentation Usages Creation of an Entity (Animal, Farm etc) Creation of an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker and the entity will be store. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. Here we are using AEI_Contract and the createAsset method of the contract is called. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time. Adding Metadata (eventy) on an Entity (Animal, Farm etc) Adding Metadata on an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker with the meta information and entity_id. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. here the request is for adding the metadata, canis major will call AddMetadata method of the AEI Contract. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time. Qyery Quering the data on blockchain goes as follow: Actor send a request to canis major with the Entity_ID. Canis major check the transaction details from the local storage and fetch the reciept. Canis Major futher call the AEI contarct, getAsset method and the fetch the stored hash. Hash will be returned back to the hash. **Note: the returned Hash could be a IPFS Hash, IOTAMaM hash or MerkleRoot, depend on the configuration of the CanisMajor and data from the has can be fetched or validated from the canismajor query apis (for more checkout the canismajor api specification)\"","title":"Usage"},{"location":"usage.html#usages","text":"","title":"Usages"},{"location":"usage.html#introduction","text":"Canis Major is designed to submit the transaction to DLT To do so we are currenlty using Alastria Network, a non-profit association that promotes the digital economy through the development of decentralised ledger technologies/Blockchain and also a member of FIWARE. Alastria partners have two operational networks (Network T and Network B) on which nodes can be deployed (either regular nodes or critical: validators and bootnodes). The first of Alastria\u2019s partner node networks (Red T) is built on Quorum technology,an open-source Ethereum client developed under the LGPL license and written in Go. GoQuorum is an Ethereum-based protocol that runs private, permissioned networks. To know more about it follow here: Alastria Network Quorum Technology GANACHE-CLI (TESTRPC) Test Network for the development.","title":"Introduction"},{"location":"usage.html#use-of-aei-contract","text":"CattleChain project using AEI (Asset, Event, Identity) Standard Contract. AEI Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. AEI, asset, events (metadata), identity, is designed to store the NGSI-LD model with the help of Canis Major Adaptor. ERC 721 Contract is follow OpenZepplin standards, security audits are trusted by leading organizations building decentralized systems.","title":"Use of AEI Contract"},{"location":"usage.html#erc-721","text":"ERC 721 A standard interface for non-fungible tokens, also known as deeds. The following standard allows for the implementation of a standard API for NFTs within smart contracts. This standard provides basic functionality to track and transfer NFTs. We considered use cases of NFTs being owned and transacted by individuals as well as consignment to third party brokers/wallets/auctioneers (\u201coperators\u201d). NFTs can represent ownership over digital or physical assets. We considered a diverse universe of assets, and we know you will dream up many more: Physical property \u2014 houses, unique artwork Virtual collectables \u2014 unique pictures of kittens, collectable cards \u201cNegative value\u201d assets \u2014 loans, burdens and other responsibilities In general, all houses are distinct and no two kittens are alike. NFTs are distinguishable and you must track the ownership of each one separately. to know more follow here: ERC 721 OpenZepplin ERC721","title":"ERC 721"},{"location":"usage.html#aei-contract-design","text":"AEI contract is cosist of 3 aspects (see the figure below): Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset.","title":"AEI Contract Design"},{"location":"usage.html#example","text":"To Store the NGSI-LD model there are few possibilities with the help of some supported storage type: IPFS IOTA MaM MerkleRoot","title":"Example"},{"location":"usage.html#methods","text":"- createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported.","title":"Methods"},{"location":"usage.html#dependencies","text":"This project uses: truffle NodeJS Ganache-CLI (testrpc) OpenZeppelin to know more follow here: GitHub Source","title":"Dependencies"},{"location":"usage.html#use-of-canis-major","text":"CanisMajor is a blockchain adaptor that supports various DLT.","title":"Use of Canis Major"},{"location":"usage.html#canis-major-design","text":"The way Canis Major work's in 'Powered By FIWARE' architecture as follows: Request from the user is consist of the Payload, Header with token and DLT_ID (base64 of public key and private key of the blockchain). Wilma PEP Proxy validate the token and check with the KeyRock IDM and validate the user, permission (Authentication and Autherisation). Once the user is validate Wilma forward the request to the Context Broker and persist it. Once the Payload stored in Context Broker Wilma notify to Canis Major with the configuration such as what attribute of the payload should be store, Blockchain Identity of the user. Futher Canis Major persist the data in blockchain using AEI contract (will be explained futher in this chapter). Github Souce Documentation","title":"Canis Major Design"},{"location":"usage.html#usages_1","text":"","title":"Usages"},{"location":"usage.html#creation-of-an-entity-animal-farm-etc","text":"Creation of an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker and the entity will be store. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. Here we are using AEI_Contract and the createAsset method of the contract is called. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time.","title":"Creation of an Entity (Animal, Farm etc)"},{"location":"usage.html#adding-metadata-eventy-on-an-entity-animal-farm-etc","text":"Adding Metadata on an entity goes as follow: Actor create an request with a payload to PEP Proxy. the request is consist of the payload and in header TOKEN (generate from the keyrock IDM) and the DLT_KEYS (which is a base64 for public and private key of the wallet). Wilma autherize the request of the user by validating it from the keyrock IDM. On Success wilma submit the request to the Context Broker with the meta information and entity_id. On Successfully entity creation wilma notify the CanisMajor Adaptor to persist the entity in blockchain (where the smart contract is already configured). Willma notify the CanisMajor with payload, dlt_keys in header and it also support option ctx_map (which allow user to mention what particular keys from the payload should be persist in the smart contract). Canis Major further validate the DLT_KEY (identity), create a signed transaction and submit it to the blockchain. here the request is for adding the metadata, canis major will call AddMetadata method of the AEI Contract. On successful transacation creation the tx_reciept of the transaction will be available in canis major, which can be queried any time.","title":"Adding Metadata (eventy) on an Entity (Animal, Farm etc)"},{"location":"usage.html#qyery","text":"Quering the data on blockchain goes as follow: Actor send a request to canis major with the Entity_ID. Canis major check the transaction details from the local storage and fetch the reciept. Canis Major futher call the AEI contarct, getAsset method and the fetch the stored hash. Hash will be returned back to the hash. **Note: the returned Hash could be a IPFS Hash, IOTAMaM hash or MerkleRoot, depend on the configuration of the CanisMajor and data from the has can be fetched or validated from the canismajor query apis (for more checkout the canismajor api specification)\"","title":"Qyery"}]}