{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"CanisMajor - FIWARE Blockchain Adaptor CanisMajor is a blockchain adaptor that supports various DLT (Ethereum Client,IOTA, FABRIC chaincode (soon)), the adaptor aims to submit the data to DLT and works with NGSI-LD and NGSI-V2 as well. The adaptor is not be recommended to work for public-permissionless blockchains (specially tokens, cryptocurrencies). CanisMajor Adaptor recommend using AEI contract Model for the Ethereum Clients. AEI (Asset,Event, Identity) Smart Contract is written in Solidity using ERC721 standard (NFT).","title":"Home"},{"location":"index.html#canismajor-fiware-blockchain-adaptor","text":"CanisMajor is a blockchain adaptor that supports various DLT (Ethereum Client,IOTA, FABRIC chaincode (soon)), the adaptor aims to submit the data to DLT and works with NGSI-LD and NGSI-V2 as well. The adaptor is not be recommended to work for public-permissionless blockchains (specially tokens, cryptocurrencies). CanisMajor Adaptor recommend using AEI contract Model for the Ethereum Clients. AEI (Asset,Event, Identity) Smart Contract is written in Solidity using ERC721 standard (NFT).","title":"CanisMajor - FIWARE Blockchain Adaptor"},{"location":"apis.html","text":"APIs","title":"APIs"},{"location":"apis.html#apis","text":"","title":"APIs"},{"location":"architecture.html","text":"Architecture Canis Major in powered by FIWARE Architecture Canis major uses FIWARE Pep-Proxy (fork version) link which allow to config \"canismajor endpoint\" process.env.CANIS_MAJOR_URL = http://localhost:4000 (canis major endpoint) chekout the sequece diagram to understand the flow: Flow Diagram Flow diagram of canismjor communicated with other fiware components Sequence Diagram Sequence diagram of canismjor communicated with other fiware components Canis Major Design: Canis major is designed to submit the transaction in diffrent kind of DLT current it support these blockchain Supported DLT Clients [x] Ethereum [x] IOTA [ ] FABRIC Chaincode and is not recommended to use in public-permissionless or crypotcurrencies. For the Etherum Clients such as geth, quorum, besu etc it is recommended to use AEI contract (plese check the contract section in this documentation), though you can also use your own contract and configure it using canismajor rest api. Canis Major also support varsion storage type store the payload Storage Type [x] IPFS [x] IOTA MaM [x] Merkle Tree IPFS You can use IPFS, a distributed system for storing and accessing files and data, in Canis Major Adaptor. To learn about IPFS please follow here IOTAMaM (Masked Authenticated Messaging) Canis Major Also Supporta IOTA MaM. The IOTA Tangle allows you to attach zero-value transactions to it, but these transactions are not signed or checked by nodes to verify their authenticity. With MAM, all messages are signed by the owner of a seed. To learn about IOTA MaM please follow link MerkleTree Merkle trees are data structures devised to authenticate, with a unique signature, a set of messages, by at the same time making an intended verifier able to verify authenticity of a single message without the disclosure of the other messages. To learn about Merkle Tree please follow link In a canis major merkle is use as mentioned in below AEI Contract Model AEI (Asset, Event and Identity) Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain. AEI Architecture AEI Contract Design Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset. Example Supported Methods - createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported. Dependencies This project uses: - truffle - NodeJS - Ganache-CLI (testrpc) - OpenZeppelin Canis Major with AEI Contract: Please follow the usages section to learn more.","title":"Architecture"},{"location":"architecture.html#architecture","text":"","title":"Architecture"},{"location":"architecture.html#canis-major-in-powered-by-fiware-architecture","text":"Canis major uses FIWARE Pep-Proxy (fork version) link which allow to config \"canismajor endpoint\" process.env.CANIS_MAJOR_URL = http://localhost:4000 (canis major endpoint) chekout the sequece diagram to understand the flow:","title":"Canis Major in powered by FIWARE Architecture"},{"location":"architecture.html#flow-diagram","text":"Flow diagram of canismjor communicated with other fiware components","title":"Flow Diagram"},{"location":"architecture.html#sequence-diagram","text":"Sequence diagram of canismjor communicated with other fiware components","title":"Sequence Diagram"},{"location":"architecture.html#canis-major-design","text":"Canis major is designed to submit the transaction in diffrent kind of DLT current it support these blockchain","title":"Canis Major Design:"},{"location":"architecture.html#supported-dlt-clients","text":"[x] Ethereum [x] IOTA [ ] FABRIC Chaincode and is not recommended to use in public-permissionless or crypotcurrencies. For the Etherum Clients such as geth, quorum, besu etc it is recommended to use AEI contract (plese check the contract section in this documentation), though you can also use your own contract and configure it using canismajor rest api. Canis Major also support varsion storage type store the payload","title":"Supported DLT Clients"},{"location":"architecture.html#storage-type","text":"[x] IPFS [x] IOTA MaM [x] Merkle Tree","title":"Storage Type"},{"location":"architecture.html#ipfs","text":"You can use IPFS, a distributed system for storing and accessing files and data, in Canis Major Adaptor. To learn about IPFS please follow here","title":"IPFS"},{"location":"architecture.html#iotamam-masked-authenticated-messaging","text":"Canis Major Also Supporta IOTA MaM. The IOTA Tangle allows you to attach zero-value transactions to it, but these transactions are not signed or checked by nodes to verify their authenticity. With MAM, all messages are signed by the owner of a seed. To learn about IOTA MaM please follow link","title":"IOTAMaM (Masked Authenticated Messaging)"},{"location":"architecture.html#merkletree","text":"Merkle trees are data structures devised to authenticate, with a unique signature, a set of messages, by at the same time making an intended verifier able to verify authenticity of a single message without the disclosure of the other messages. To learn about Merkle Tree please follow link In a canis major merkle is use as mentioned in below","title":"MerkleTree"},{"location":"architecture.html#aei-contract-model","text":"AEI (Asset, Event and Identity) Smart Contract is written in Solidity using ERC721 standard (NFT) and can be use with Ethereum Clients. It is compatible with FIWARE-Canis Major Adaptor to store the data in blockchain.","title":"AEI Contract Model"},{"location":"architecture.html#aei-architecture","text":"AEI Contract Design Entity/Asset with a unique identity will be a new asset (1:1 mapping of asset to an identity). Event or Metadata of the asset/entity has a 1:n mapping. An Asset can have a 1:n relationship with any other asset.","title":"AEI Architecture"},{"location":"architecture.html#example","text":"","title":"Example"},{"location":"architecture.html#supported-methods","text":"- createAsset(bytes32 uuid, string memory _newHash) - getAsset(bytes32 uuid) - updateAsset(bytes32 uuid, string memory _newHash) - removeAsset (bytes32 uuid) - isValidAsset(bytes32 uuid, bytes32[] memory _proof, bytes32 _leaf) - isValidAssetEthMessage(bytes32 uuid, bytes32 _messageHash, bytes memory _signature) - addRelation(bytes32 uuid, bytes32 reluuid) - getRelations(bytes32 uuid) - removeRelation(bytes32 uuid, uint index) - isValidRelation(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) - addMetadata(bytes32 uuid, string memory _metadatahash) - getMetadatas(bytes32 uuid) public view returns (string[] memory) - removeMetadata(bytes32 uuid, uint index) - isValidMetadata(bytes32 uuid, uint index, bytes32[] memory _proof, bytes32 _leaf) Apart from that ERC721, Ownable, MerkleProof, ECDSA methods are supported.","title":"Supported Methods"},{"location":"architecture.html#dependencies","text":"This project uses: - truffle - NodeJS - Ganache-CLI (testrpc) - OpenZeppelin","title":"Dependencies"},{"location":"architecture.html#canis-major-with-aei-contract","text":"Please follow the usages section to learn more.","title":"Canis Major with AEI Contract:"},{"location":"installation.html","text":"Installation Guide This section describes installing Canis Major Blockchain Adaptor: Requirments In order to execute Canis Major, it is needed to have previously installed the following software: - NodeJS 12 - ORM Database (SQL, Postgres) # Installation The following steps need to be performed to get Canis Major up and running: Download the software, using GitHub. ``sh git clone https://github.com/fiware-blockchain/canismajor 2. Install all required libraries using npm. ```sh cd canismajor npm install Configure the installation","title":"Installation"},{"location":"installation.html#installation-guide","text":"This section describes installing Canis Major Blockchain Adaptor:","title":"Installation Guide"},{"location":"installation.html#requirments","text":"In order to execute Canis Major, it is needed to have previously installed the following software: - NodeJS 12 - ORM Database (SQL, Postgres) # Installation The following steps need to be performed to get Canis Major up and running: Download the software, using GitHub. ``sh git clone https://github.com/fiware-blockchain/canismajor 2. Install all required libraries using npm. ```sh cd canismajor npm install Configure the installation","title":"Requirments"},{"location":"usage.html","text":"Usages","title":"Usage"},{"location":"usage.html#usages","text":"","title":"Usages"}]}